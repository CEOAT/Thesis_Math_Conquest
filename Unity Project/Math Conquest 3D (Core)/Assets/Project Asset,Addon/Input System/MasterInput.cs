//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Project Asset,Addon/Input System/MasterInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MasterInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MasterInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MasterInput"",
    ""maps"": [
        {
            ""name"": ""PlayerControlDungeon"",
            ""id"": ""842cae48-b2e0-4f9e-bb65-ceb688534142"",
            ""actions"": [
                {
                    ""name"": ""MoveLeftRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6560cd02-ee1a-4a0a-a08e-713f9f800fd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2e4a3698-eaeb-4483-823e-d75d2ea6de57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ConfirmAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""fdfa62dc-d915-441f-9395-802b198e4cc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClearAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""56a0d206-7354-449b-a0e0-be21ac0e04ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponArt"",
                    ""type"": ""Button"",
                    ""id"": ""840b67de-5234-401c-a969-f7e635d5d129"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchTarget"",
                    ""type"": ""Button"",
                    ""id"": ""f3ee1286-c88c-4c6d-b25e-73a116ae68bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""03c9dda6-437e-477f-ad11-9f9e03bd4779"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""af0f66c4-80a7-4801-a1a1-43c1b669dd39"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3cebcfa4-e1d5-480f-a0a4-fe70f95be42e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3843218c-3137-4a95-b1a2-5e050fc82252"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""799d8b6a-c3bb-439d-991d-fd58c745f912"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""370e0bfa-c30c-48d5-8793-2540c2998af0"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ec54e8a-69ad-4f44-8f3d-d9196c23c266"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2315f6ce-fcc8-4d04-9d73-25aac0153f05"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponArt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be593045-a56a-484c-b906-9c9ee5ce2511"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClearAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ff7ca70-97fd-4883-8018-c0046018fa53"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerControlElimination"",
            ""id"": ""66507642-8aa9-48e2-8497-6acf4985e772"",
            ""actions"": [
                {
                    ""name"": ""EnterAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""3eb0adb7-e91d-44a1-bb64-bbd36d77c74c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClearAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""5e8fd122-b929-498a-869c-ef793734d1f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchEnemy"",
                    ""type"": ""Button"",
                    ""id"": ""6b21754b-9cb5-44e5-92b5-ea73c24c45a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7a3b993-33a9-4d2c-8812-58e6be0ad2ea"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cc321cd-81fc-444f-ab66-618e16c98b02"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClearAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d4fea7c-25a5-4261-b3b8-2fe2af7ef664"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchEnemy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerControlGeneral"",
            ""id"": ""a955f81a-466e-46f2-9699-474cecb18e67"",
            ""actions"": [
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""8041132b-c0f1-4bcf-913d-af7ed0fffcc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.5)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextDialog"",
                    ""type"": ""Button"",
                    ""id"": ""b4499962-99ff-4757-868a-00710ca5d9e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.8)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""93584668-50db-417f-abba-8bf081e0af2e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""120ab47e-f3a2-4132-82f3-a6c5bd9ad108"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de12be4-c76c-468b-815b-eecdb019dbaf"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextDialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerControlExploration"",
            ""id"": ""00064fd6-8ab7-408a-82e0-8ce50573dbb9"",
            ""actions"": [
                {
                    ""name"": ""MoveUpdown"",
                    ""type"": ""PassThrough"",
                    ""id"": ""89e11989-8d1d-4e8c-9614-7798db898ebc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeftRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b05c1e2e-b740-4f9d-b0e7-f0e17ef49040"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""723245de-a180-4462-8d76-37e74fd0b1ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""694d00e6-b08c-457b-9cbd-19f065763901"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d68a054d-e4c0-4cef-9f56-103e1f03a6c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchTarget"",
                    ""type"": ""Button"",
                    ""id"": ""5a54c76f-3dd8-4d06-be19-d7135b77b5ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClearAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""b2ce91a5-2c08-4c36-81da-b1059386f0a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1e887a0a-2755-4fd1-bb40-99c9523a188b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUpdown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""96e024b9-7132-4156-9b2f-40f43f47cbcf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUpdown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3a2ba436-0c89-40b1-858f-b9c2e52880f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUpdown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""889a35cb-971d-4691-a939-2945543b7638"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b53fa372-d2d8-4e5a-930f-35fe61f32164"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4ec1e644-ced9-4e71-80ca-bb02d3726ee0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7c722b73-0542-496b-97ea-d640e5101ecd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""05994b3c-0aa7-4fe8-906c-7e09d6d65d2d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""956c19bf-f0e2-4b4b-a869-72b9bceccf21"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9d1ef2f9-3ba2-40cc-8eff-1af72572494d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c38edc6a-e06c-4b99-97e4-cb6438def7ba"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClearAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07352144-5bee-479a-8dee-0373bb2d4c36"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClearAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6274c1b8-e216-4783-b0ac-86bc3de6a708"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af45669a-748d-4b4d-a95c-1d9b286b7575"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WindowControl"",
            ""id"": ""9d792cc8-e9d0-4577-8d5d-da69ab4a402b"",
            ""actions"": [
                {
                    ""name"": ""ConfirmAnswer"",
                    ""type"": ""Button"",
                    ""id"": ""29c61b4a-991d-42c9-813b-d2d22a78afde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseWindow"",
                    ""type"": ""Button"",
                    ""id"": ""17cc94ff-b7dc-4a66-a76c-a64500d9b866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextInstructionPage"",
                    ""type"": ""Button"",
                    ""id"": ""205af486-76fb-4da5-993e-3fdb6410dae7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousInstructionPage"",
                    ""type"": ""Button"",
                    ""id"": ""19772f93-350b-448a-a45c-da6f92024c45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchInputField"",
                    ""type"": ""Button"",
                    ""id"": ""6c1c3d89-c776-4635-8348-f012cbaec673"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37d9bfb6-363f-4b1e-971b-6f616e8e9c8a"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ConfirmAnswer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f2b8066-51f7-4dee-b638-a27a091bbebd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseWindow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97d11ffd-b39b-4f60-9075-6c87debb803b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextInstructionPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""787c4399-dbff-4b7b-b552-fbee4063f001"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousInstructionPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1abed8d-0883-4766-8b7c-7d90d9ff3eb9"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchInputField"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard Control"",
            ""bindingGroup"": ""Keyboard Control"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerControlDungeon
        m_PlayerControlDungeon = asset.FindActionMap("PlayerControlDungeon", throwIfNotFound: true);
        m_PlayerControlDungeon_MoveLeftRight = m_PlayerControlDungeon.FindAction("MoveLeftRight", throwIfNotFound: true);
        m_PlayerControlDungeon_Jump = m_PlayerControlDungeon.FindAction("Jump", throwIfNotFound: true);
        m_PlayerControlDungeon_ConfirmAnswer = m_PlayerControlDungeon.FindAction("ConfirmAnswer", throwIfNotFound: true);
        m_PlayerControlDungeon_ClearAnswer = m_PlayerControlDungeon.FindAction("ClearAnswer", throwIfNotFound: true);
        m_PlayerControlDungeon_WeaponArt = m_PlayerControlDungeon.FindAction("WeaponArt", throwIfNotFound: true);
        m_PlayerControlDungeon_SwitchTarget = m_PlayerControlDungeon.FindAction("SwitchTarget", throwIfNotFound: true);
        // PlayerControlElimination
        m_PlayerControlElimination = asset.FindActionMap("PlayerControlElimination", throwIfNotFound: true);
        m_PlayerControlElimination_EnterAnswer = m_PlayerControlElimination.FindAction("EnterAnswer", throwIfNotFound: true);
        m_PlayerControlElimination_ClearAnswer = m_PlayerControlElimination.FindAction("ClearAnswer", throwIfNotFound: true);
        m_PlayerControlElimination_SwitchEnemy = m_PlayerControlElimination.FindAction("SwitchEnemy", throwIfNotFound: true);
        // PlayerControlGeneral
        m_PlayerControlGeneral = asset.FindActionMap("PlayerControlGeneral", throwIfNotFound: true);
        m_PlayerControlGeneral_PauseGame = m_PlayerControlGeneral.FindAction("PauseGame", throwIfNotFound: true);
        m_PlayerControlGeneral_NextDialog = m_PlayerControlGeneral.FindAction("NextDialog", throwIfNotFound: true);
        // PlayerControlExploration
        m_PlayerControlExploration = asset.FindActionMap("PlayerControlExploration", throwIfNotFound: true);
        m_PlayerControlExploration_MoveUpdown = m_PlayerControlExploration.FindAction("MoveUpdown", throwIfNotFound: true);
        m_PlayerControlExploration_MoveLeftRight = m_PlayerControlExploration.FindAction("MoveLeftRight", throwIfNotFound: true);
        m_PlayerControlExploration_Run = m_PlayerControlExploration.FindAction("Run", throwIfNotFound: true);
        m_PlayerControlExploration_Interact = m_PlayerControlExploration.FindAction("Interact", throwIfNotFound: true);
        m_PlayerControlExploration_Attack = m_PlayerControlExploration.FindAction("Attack", throwIfNotFound: true);
        m_PlayerControlExploration_SwitchTarget = m_PlayerControlExploration.FindAction("SwitchTarget", throwIfNotFound: true);
        m_PlayerControlExploration_ClearAnswer = m_PlayerControlExploration.FindAction("ClearAnswer", throwIfNotFound: true);
        // WindowControl
        m_WindowControl = asset.FindActionMap("WindowControl", throwIfNotFound: true);
        m_WindowControl_ConfirmAnswer = m_WindowControl.FindAction("ConfirmAnswer", throwIfNotFound: true);
        m_WindowControl_CloseWindow = m_WindowControl.FindAction("CloseWindow", throwIfNotFound: true);
        m_WindowControl_NextInstructionPage = m_WindowControl.FindAction("NextInstructionPage", throwIfNotFound: true);
        m_WindowControl_PreviousInstructionPage = m_WindowControl.FindAction("PreviousInstructionPage", throwIfNotFound: true);
        m_WindowControl_SwitchInputField = m_WindowControl.FindAction("SwitchInputField", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControlDungeon
    private readonly InputActionMap m_PlayerControlDungeon;
    private IPlayerControlDungeonActions m_PlayerControlDungeonActionsCallbackInterface;
    private readonly InputAction m_PlayerControlDungeon_MoveLeftRight;
    private readonly InputAction m_PlayerControlDungeon_Jump;
    private readonly InputAction m_PlayerControlDungeon_ConfirmAnswer;
    private readonly InputAction m_PlayerControlDungeon_ClearAnswer;
    private readonly InputAction m_PlayerControlDungeon_WeaponArt;
    private readonly InputAction m_PlayerControlDungeon_SwitchTarget;
    public struct PlayerControlDungeonActions
    {
        private @MasterInput m_Wrapper;
        public PlayerControlDungeonActions(@MasterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeftRight => m_Wrapper.m_PlayerControlDungeon_MoveLeftRight;
        public InputAction @Jump => m_Wrapper.m_PlayerControlDungeon_Jump;
        public InputAction @ConfirmAnswer => m_Wrapper.m_PlayerControlDungeon_ConfirmAnswer;
        public InputAction @ClearAnswer => m_Wrapper.m_PlayerControlDungeon_ClearAnswer;
        public InputAction @WeaponArt => m_Wrapper.m_PlayerControlDungeon_WeaponArt;
        public InputAction @SwitchTarget => m_Wrapper.m_PlayerControlDungeon_SwitchTarget;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlDungeon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlDungeonActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlDungeonActions instance)
        {
            if (m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface != null)
            {
                @MoveLeftRight.started -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnMoveLeftRight;
                @MoveLeftRight.performed -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnMoveLeftRight;
                @MoveLeftRight.canceled -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnMoveLeftRight;
                @Jump.started -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnJump;
                @ConfirmAnswer.started -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnConfirmAnswer;
                @ConfirmAnswer.performed -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnConfirmAnswer;
                @ConfirmAnswer.canceled -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnConfirmAnswer;
                @ClearAnswer.started -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnClearAnswer;
                @ClearAnswer.performed -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnClearAnswer;
                @ClearAnswer.canceled -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnClearAnswer;
                @WeaponArt.started -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnWeaponArt;
                @WeaponArt.performed -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnWeaponArt;
                @WeaponArt.canceled -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnWeaponArt;
                @SwitchTarget.started -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnSwitchTarget;
                @SwitchTarget.performed -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnSwitchTarget;
                @SwitchTarget.canceled -= m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface.OnSwitchTarget;
            }
            m_Wrapper.m_PlayerControlDungeonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveLeftRight.started += instance.OnMoveLeftRight;
                @MoveLeftRight.performed += instance.OnMoveLeftRight;
                @MoveLeftRight.canceled += instance.OnMoveLeftRight;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ConfirmAnswer.started += instance.OnConfirmAnswer;
                @ConfirmAnswer.performed += instance.OnConfirmAnswer;
                @ConfirmAnswer.canceled += instance.OnConfirmAnswer;
                @ClearAnswer.started += instance.OnClearAnswer;
                @ClearAnswer.performed += instance.OnClearAnswer;
                @ClearAnswer.canceled += instance.OnClearAnswer;
                @WeaponArt.started += instance.OnWeaponArt;
                @WeaponArt.performed += instance.OnWeaponArt;
                @WeaponArt.canceled += instance.OnWeaponArt;
                @SwitchTarget.started += instance.OnSwitchTarget;
                @SwitchTarget.performed += instance.OnSwitchTarget;
                @SwitchTarget.canceled += instance.OnSwitchTarget;
            }
        }
    }
    public PlayerControlDungeonActions @PlayerControlDungeon => new PlayerControlDungeonActions(this);

    // PlayerControlElimination
    private readonly InputActionMap m_PlayerControlElimination;
    private IPlayerControlEliminationActions m_PlayerControlEliminationActionsCallbackInterface;
    private readonly InputAction m_PlayerControlElimination_EnterAnswer;
    private readonly InputAction m_PlayerControlElimination_ClearAnswer;
    private readonly InputAction m_PlayerControlElimination_SwitchEnemy;
    public struct PlayerControlEliminationActions
    {
        private @MasterInput m_Wrapper;
        public PlayerControlEliminationActions(@MasterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnterAnswer => m_Wrapper.m_PlayerControlElimination_EnterAnswer;
        public InputAction @ClearAnswer => m_Wrapper.m_PlayerControlElimination_ClearAnswer;
        public InputAction @SwitchEnemy => m_Wrapper.m_PlayerControlElimination_SwitchEnemy;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlElimination; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlEliminationActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlEliminationActions instance)
        {
            if (m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface != null)
            {
                @EnterAnswer.started -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnEnterAnswer;
                @EnterAnswer.performed -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnEnterAnswer;
                @EnterAnswer.canceled -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnEnterAnswer;
                @ClearAnswer.started -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnClearAnswer;
                @ClearAnswer.performed -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnClearAnswer;
                @ClearAnswer.canceled -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnClearAnswer;
                @SwitchEnemy.started -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnSwitchEnemy;
                @SwitchEnemy.performed -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnSwitchEnemy;
                @SwitchEnemy.canceled -= m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface.OnSwitchEnemy;
            }
            m_Wrapper.m_PlayerControlEliminationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EnterAnswer.started += instance.OnEnterAnswer;
                @EnterAnswer.performed += instance.OnEnterAnswer;
                @EnterAnswer.canceled += instance.OnEnterAnswer;
                @ClearAnswer.started += instance.OnClearAnswer;
                @ClearAnswer.performed += instance.OnClearAnswer;
                @ClearAnswer.canceled += instance.OnClearAnswer;
                @SwitchEnemy.started += instance.OnSwitchEnemy;
                @SwitchEnemy.performed += instance.OnSwitchEnemy;
                @SwitchEnemy.canceled += instance.OnSwitchEnemy;
            }
        }
    }
    public PlayerControlEliminationActions @PlayerControlElimination => new PlayerControlEliminationActions(this);

    // PlayerControlGeneral
    private readonly InputActionMap m_PlayerControlGeneral;
    private IPlayerControlGeneralActions m_PlayerControlGeneralActionsCallbackInterface;
    private readonly InputAction m_PlayerControlGeneral_PauseGame;
    private readonly InputAction m_PlayerControlGeneral_NextDialog;
    public struct PlayerControlGeneralActions
    {
        private @MasterInput m_Wrapper;
        public PlayerControlGeneralActions(@MasterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PauseGame => m_Wrapper.m_PlayerControlGeneral_PauseGame;
        public InputAction @NextDialog => m_Wrapper.m_PlayerControlGeneral_NextDialog;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlGeneral; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlGeneralActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlGeneralActions instance)
        {
            if (m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface != null)
            {
                @PauseGame.started -= m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface.OnPauseGame;
                @PauseGame.performed -= m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface.OnPauseGame;
                @PauseGame.canceled -= m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface.OnPauseGame;
                @NextDialog.started -= m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface.OnNextDialog;
                @NextDialog.performed -= m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface.OnNextDialog;
                @NextDialog.canceled -= m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface.OnNextDialog;
            }
            m_Wrapper.m_PlayerControlGeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PauseGame.started += instance.OnPauseGame;
                @PauseGame.performed += instance.OnPauseGame;
                @PauseGame.canceled += instance.OnPauseGame;
                @NextDialog.started += instance.OnNextDialog;
                @NextDialog.performed += instance.OnNextDialog;
                @NextDialog.canceled += instance.OnNextDialog;
            }
        }
    }
    public PlayerControlGeneralActions @PlayerControlGeneral => new PlayerControlGeneralActions(this);

    // PlayerControlExploration
    private readonly InputActionMap m_PlayerControlExploration;
    private IPlayerControlExplorationActions m_PlayerControlExplorationActionsCallbackInterface;
    private readonly InputAction m_PlayerControlExploration_MoveUpdown;
    private readonly InputAction m_PlayerControlExploration_MoveLeftRight;
    private readonly InputAction m_PlayerControlExploration_Run;
    private readonly InputAction m_PlayerControlExploration_Interact;
    private readonly InputAction m_PlayerControlExploration_Attack;
    private readonly InputAction m_PlayerControlExploration_SwitchTarget;
    private readonly InputAction m_PlayerControlExploration_ClearAnswer;
    public struct PlayerControlExplorationActions
    {
        private @MasterInput m_Wrapper;
        public PlayerControlExplorationActions(@MasterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUpdown => m_Wrapper.m_PlayerControlExploration_MoveUpdown;
        public InputAction @MoveLeftRight => m_Wrapper.m_PlayerControlExploration_MoveLeftRight;
        public InputAction @Run => m_Wrapper.m_PlayerControlExploration_Run;
        public InputAction @Interact => m_Wrapper.m_PlayerControlExploration_Interact;
        public InputAction @Attack => m_Wrapper.m_PlayerControlExploration_Attack;
        public InputAction @SwitchTarget => m_Wrapper.m_PlayerControlExploration_SwitchTarget;
        public InputAction @ClearAnswer => m_Wrapper.m_PlayerControlExploration_ClearAnswer;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlExploration; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlExplorationActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlExplorationActions instance)
        {
            if (m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface != null)
            {
                @MoveUpdown.started -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnMoveUpdown;
                @MoveUpdown.performed -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnMoveUpdown;
                @MoveUpdown.canceled -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnMoveUpdown;
                @MoveLeftRight.started -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnMoveLeftRight;
                @MoveLeftRight.performed -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnMoveLeftRight;
                @MoveLeftRight.canceled -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnMoveLeftRight;
                @Run.started -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnRun;
                @Interact.started -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnInteract;
                @Attack.started -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnAttack;
                @SwitchTarget.started -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnSwitchTarget;
                @SwitchTarget.performed -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnSwitchTarget;
                @SwitchTarget.canceled -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnSwitchTarget;
                @ClearAnswer.started -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnClearAnswer;
                @ClearAnswer.performed -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnClearAnswer;
                @ClearAnswer.canceled -= m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface.OnClearAnswer;
            }
            m_Wrapper.m_PlayerControlExplorationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveUpdown.started += instance.OnMoveUpdown;
                @MoveUpdown.performed += instance.OnMoveUpdown;
                @MoveUpdown.canceled += instance.OnMoveUpdown;
                @MoveLeftRight.started += instance.OnMoveLeftRight;
                @MoveLeftRight.performed += instance.OnMoveLeftRight;
                @MoveLeftRight.canceled += instance.OnMoveLeftRight;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @SwitchTarget.started += instance.OnSwitchTarget;
                @SwitchTarget.performed += instance.OnSwitchTarget;
                @SwitchTarget.canceled += instance.OnSwitchTarget;
                @ClearAnswer.started += instance.OnClearAnswer;
                @ClearAnswer.performed += instance.OnClearAnswer;
                @ClearAnswer.canceled += instance.OnClearAnswer;
            }
        }
    }
    public PlayerControlExplorationActions @PlayerControlExploration => new PlayerControlExplorationActions(this);

    // WindowControl
    private readonly InputActionMap m_WindowControl;
    private IWindowControlActions m_WindowControlActionsCallbackInterface;
    private readonly InputAction m_WindowControl_ConfirmAnswer;
    private readonly InputAction m_WindowControl_CloseWindow;
    private readonly InputAction m_WindowControl_NextInstructionPage;
    private readonly InputAction m_WindowControl_PreviousInstructionPage;
    private readonly InputAction m_WindowControl_SwitchInputField;
    public struct WindowControlActions
    {
        private @MasterInput m_Wrapper;
        public WindowControlActions(@MasterInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ConfirmAnswer => m_Wrapper.m_WindowControl_ConfirmAnswer;
        public InputAction @CloseWindow => m_Wrapper.m_WindowControl_CloseWindow;
        public InputAction @NextInstructionPage => m_Wrapper.m_WindowControl_NextInstructionPage;
        public InputAction @PreviousInstructionPage => m_Wrapper.m_WindowControl_PreviousInstructionPage;
        public InputAction @SwitchInputField => m_Wrapper.m_WindowControl_SwitchInputField;
        public InputActionMap Get() { return m_Wrapper.m_WindowControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WindowControlActions set) { return set.Get(); }
        public void SetCallbacks(IWindowControlActions instance)
        {
            if (m_Wrapper.m_WindowControlActionsCallbackInterface != null)
            {
                @ConfirmAnswer.started -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnConfirmAnswer;
                @ConfirmAnswer.performed -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnConfirmAnswer;
                @ConfirmAnswer.canceled -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnConfirmAnswer;
                @CloseWindow.started -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnCloseWindow;
                @CloseWindow.performed -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnCloseWindow;
                @CloseWindow.canceled -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnCloseWindow;
                @NextInstructionPage.started -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnNextInstructionPage;
                @NextInstructionPage.performed -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnNextInstructionPage;
                @NextInstructionPage.canceled -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnNextInstructionPage;
                @PreviousInstructionPage.started -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnPreviousInstructionPage;
                @PreviousInstructionPage.performed -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnPreviousInstructionPage;
                @PreviousInstructionPage.canceled -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnPreviousInstructionPage;
                @SwitchInputField.started -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnSwitchInputField;
                @SwitchInputField.performed -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnSwitchInputField;
                @SwitchInputField.canceled -= m_Wrapper.m_WindowControlActionsCallbackInterface.OnSwitchInputField;
            }
            m_Wrapper.m_WindowControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ConfirmAnswer.started += instance.OnConfirmAnswer;
                @ConfirmAnswer.performed += instance.OnConfirmAnswer;
                @ConfirmAnswer.canceled += instance.OnConfirmAnswer;
                @CloseWindow.started += instance.OnCloseWindow;
                @CloseWindow.performed += instance.OnCloseWindow;
                @CloseWindow.canceled += instance.OnCloseWindow;
                @NextInstructionPage.started += instance.OnNextInstructionPage;
                @NextInstructionPage.performed += instance.OnNextInstructionPage;
                @NextInstructionPage.canceled += instance.OnNextInstructionPage;
                @PreviousInstructionPage.started += instance.OnPreviousInstructionPage;
                @PreviousInstructionPage.performed += instance.OnPreviousInstructionPage;
                @PreviousInstructionPage.canceled += instance.OnPreviousInstructionPage;
                @SwitchInputField.started += instance.OnSwitchInputField;
                @SwitchInputField.performed += instance.OnSwitchInputField;
                @SwitchInputField.canceled += instance.OnSwitchInputField;
            }
        }
    }
    public WindowControlActions @WindowControl => new WindowControlActions(this);
    private int m_KeyboardControlSchemeIndex = -1;
    public InputControlScheme KeyboardControlScheme
    {
        get
        {
            if (m_KeyboardControlSchemeIndex == -1) m_KeyboardControlSchemeIndex = asset.FindControlSchemeIndex("Keyboard Control");
            return asset.controlSchemes[m_KeyboardControlSchemeIndex];
        }
    }
    public interface IPlayerControlDungeonActions
    {
        void OnMoveLeftRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnConfirmAnswer(InputAction.CallbackContext context);
        void OnClearAnswer(InputAction.CallbackContext context);
        void OnWeaponArt(InputAction.CallbackContext context);
        void OnSwitchTarget(InputAction.CallbackContext context);
    }
    public interface IPlayerControlEliminationActions
    {
        void OnEnterAnswer(InputAction.CallbackContext context);
        void OnClearAnswer(InputAction.CallbackContext context);
        void OnSwitchEnemy(InputAction.CallbackContext context);
    }
    public interface IPlayerControlGeneralActions
    {
        void OnPauseGame(InputAction.CallbackContext context);
        void OnNextDialog(InputAction.CallbackContext context);
    }
    public interface IPlayerControlExplorationActions
    {
        void OnMoveUpdown(InputAction.CallbackContext context);
        void OnMoveLeftRight(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSwitchTarget(InputAction.CallbackContext context);
        void OnClearAnswer(InputAction.CallbackContext context);
    }
    public interface IWindowControlActions
    {
        void OnConfirmAnswer(InputAction.CallbackContext context);
        void OnCloseWindow(InputAction.CallbackContext context);
        void OnNextInstructionPage(InputAction.CallbackContext context);
        void OnPreviousInstructionPage(InputAction.CallbackContext context);
        void OnSwitchInputField(InputAction.CallbackContext context);
    }
}
